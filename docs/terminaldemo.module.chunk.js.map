{"version":3,"sources":["/Users/kcjones-evans/work/primeng/src/app/components/terminal/terminal.ts","/Users/kcjones-evans/work/primeng/src/app/components/terminal/terminalservice.ts","/Users/kcjones-evans/work/primeng/src/app/showcase/components/terminal/terminaldemo-routing.module.ts","/Users/kcjones-evans/work/primeng/src/app/showcase/components/terminal/terminaldemo.html","/Users/kcjones-evans/work/primeng/src/app/showcase/components/terminal/terminaldemo.module.ts","/Users/kcjones-evans/work/primeng/src/app/showcase/components/terminal/terminaldemo.ts"],"names":[],"mappings":"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","file":"terminaldemo.module.chunk.js","sourcesContent":["import {NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,Output,EventEmitter,ElementRef} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from '../dom/domhandler';\nimport {TerminalService} from './terminalservice';\nimport {Subscription}   from 'rxjs/Subscription';\n\n@Component({\n    selector: 'p-terminal',\n    template: `\n        <div [ngClass]=\"'ui-terminal ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"focus(in)\">\n            <div *ngIf=\"welcomeMessage\">{{welcomeMessage}}</div>\n            <div class=\"ui-terminal-content\">\n                <div *ngFor=\"let command of commands\">\n                    <span>{{prompt}}</span>\n                    <span class=\"ui-terminal-command\">{{command.text}}</span>\n                    <div>{{command.response}}</div>\n                </div>\n            </div>\n            <div>\n                <span class=\"ui-terminal-content-prompt\">{{prompt}}</span>\n                <input #in type=\"text\" [(ngModel)]=\"command\" class=\"ui-terminal-input\" autocomplete=\"off\" (keydown)=\"handleCommand($event)\" autofocus>\n            </div>\n        </div>\n    `,\n    providers: [DomHandler]\n})\nexport class Terminal implements AfterViewInit,AfterViewChecked,OnDestroy {\n\n    @Input() welcomeMessage: string;\n\n    @Input() prompt: string;\n        \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n            \n    commands: any[] = [];\n    \n    command: string;\n    \n    container: Element;\n    \n    commandProcessed: boolean;\n    \n    subscription: Subscription;\n    \n    constructor(public el: ElementRef, public domHandler: DomHandler, public terminalService: TerminalService) {\n        this.subscription = terminalService.responseHandler.subscribe(response => {\n            this.commands[this.commands.length - 1].response = response;\n            this.commandProcessed = true;\n        });\n    }\n    \n    ngAfterViewInit() {\n        this.container = this.domHandler.find(this.el.nativeElement, '.ui-terminal')[0];\n    }\n    \n    ngAfterViewChecked() {\n        if(this.commandProcessed) {\n            this.container.scrollTop = this.container.scrollHeight;\n            this.commandProcessed = false;\n        }\n    }\n                \n    @Input()\n    set response(value: string) {\n        if(value) {\n            this.commands[this.commands.length - 1].response = value;\n            this.commandProcessed = true;\n        }\n    }\n    \n    handleCommand(event: KeyboardEvent) {\n        if(event.keyCode == 13) {\n            this.commands.push({text: this.command});\n            this.terminalService.sendCommand(this.command);\n            this.command = '';\n        }\n    }\n    \n    focus(element: HTMLElement) {\n        element.focus();\n    }\n    \n    ngOnDestroy() {\n        if(this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    \n}\n\n@NgModule({\n    imports: [CommonModule,FormsModule],\n    exports: [Terminal],\n    declarations: [Terminal]\n})\nexport class TerminalModule { }\n\n\n// WEBPACK FOOTER //\n// /Users/kcjones-evans/work/primeng/src/app/components/terminal/terminal.ts","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class TerminalService {\n    \n    private commandSource = new Subject<string>();\n    private responseSource = new Subject<string>();\n    \n    commandHandler = this.commandSource.asObservable();\n    responseHandler = this.responseSource.asObservable();\n    \n    sendCommand(command: string) {\n        if(command) {\n            this.commandSource.next(command);\n        }\n    }\n    \n    sendResponse(response: string) {\n        if(response) {\n            this.responseSource.next(response);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// /Users/kcjones-evans/work/primeng/src/app/components/terminal/terminalservice.ts","import {NgModule}     from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {TerminalDemo} from './terminaldemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: TerminalDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class TerminalDemoRoutingModule {}\n\n\n\n// WEBPACK FOOTER //\n// /Users/kcjones-evans/work/primeng/src/app/showcase/components/terminal/terminaldemo-routing.module.ts","module.exports = \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">Terminal</span>\\n        <span>Terminal is a text based user interface. Enter \\\"date\\\" to display the current date.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-terminal welcomeMessage=\\\"Welcome to PrimeNG\\\" prompt=\\\"primeng $\\\"></p-terminal>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView effect=\\\"fade\\\">\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;TerminalModule&#125; from 'primeng/primeng';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>Commands are processed using observables via the TerminalService. Import this service into your component and subscribe\\n            to commandHandler to process commands by sending replies with sendResponse function.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;Component&#125; from '@angular/core';\\nimport &#123;TerminalService&#125; from 'primeng/components/terminal/terminalservice';\\n\\n@Component(&#123;\\n    template: '&lt;p-terminal welcomeMessage=\\\"Welcome to PrimeNG\\\" prompt=\\\"primeng $\\\"&gt;&lt;/p-terminal&gt;',\\n    providers: [TerminalService]\\n&#125;)\\nexport class TerminalDemo &#123;\\n    \\n    constructor(private terminalService: TerminalService) &#123;\\n        this.terminalService.commandHandler.subscribe(command => &#123;\\n            let response = (command === 'date') ? new Date().toDateString() : 'Unknown command: ' + command;\\n            this.terminalService.sendResponse(response);\\n        &#125;);\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>welcomeMessage</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Initial text to display on terminal.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>prompt</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Prompt text for each command.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>style</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>styleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the component.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n            \\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Element</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-terminal</td>\\n                            <td>Container element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-terminal-content</td>\\n                            <td>Content of terminal.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-terminal-content-prompt</td>\\n                            <td>Prompt text.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-terminal-input</td>\\n                            <td>Input element to enter commands.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n\\n<p-tabPanel header=\\\"Source\\\">\\n    <a href=\\\"https://github.com/primefacestree/master/src/app/showcase/components/terminal\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n        <i class=\\\"fa fa-github\\\"></i>\\n        <span>View on GitHub</span>\\n    </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-terminal welcomeMessage=\\\"Welcome to PrimeNG\\\" prompt=\\\"primeng $\\\"&gt;&lt;/p-terminal&gt;\\n</code>\\n</pre>\\n    \\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;Component&#125; from '@angular/core';\\nimport &#123;TerminalService&#125; from 'primeng/components/terminal/terminalservice';\\nimport &#123;Subscription&#125; from 'rxjs/Subscription';\\n\\n@Component(&#123;\\n    templateUrl: './terminaldemo.html',\\n    providers: [TerminalService]\\n&#125;)\\nexport class TerminalDemo &#123;\\n\\n    subscription: Subscription;\\n    \\n    constructor(private terminalService: TerminalService) &#123;\\n        this.terminalService.commandHandler.subscribe(command => &#123;\\n            let response = (command === 'date') ? new Date().toDateString() : 'Unknown command: ' + command;\\n            this.terminalService.sendResponse(response);\\n        &#125;);\\n    &#125;\\n    \\n    ngOnDestroy() &#123;\\n        if(this.subscription) &#123;\\n            this.subscription.unsubscribe();\\n        &#125;\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n</p-tabPanel>\\n\\n\\n    </p-tabView>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/kcjones-evans/work/primeng/src/app/showcase/components/terminal/terminaldemo.html\n// module id = ../../../../../src/app/showcase/components/terminal/terminaldemo.html\n// module chunks = terminaldemo.module","import {NgModule}     from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TerminalDemo} from './terminaldemo';\nimport {TerminalDemoRoutingModule} from './terminaldemo-routing.module';\nimport {TerminalModule} from '../../../components/terminal/terminal';\nimport {TabViewModule} from '../../../components/tabview/tabview';\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tTerminalDemoRoutingModule,\n        TerminalModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tTerminalDemo\n\t]\n})\nexport class TerminalDemoModule {}\n\n\n\n// WEBPACK FOOTER //\n// /Users/kcjones-evans/work/primeng/src/app/showcase/components/terminal/terminaldemo.module.ts","import {Component,OnDestroy} from '@angular/core';\nimport {TerminalService} from '../../../components/terminal/terminalservice';\nimport {Subscription}   from 'rxjs/Subscription';\n\n@Component({\n    templateUrl: './terminaldemo.html',\n    providers: [TerminalService]\n})\nexport class TerminalDemo implements OnDestroy {\n    \n    subscription: Subscription;\n    \n    constructor(private terminalService: TerminalService) {\n        this.subscription = this.terminalService.commandHandler.subscribe(command => {\n            let response = (command === 'date') ? new Date().toDateString() : 'Unknown command: ' + command;\n            this.terminalService.sendResponse(response);\n        });\n    }\n    \n    ngOnDestroy() {\n        if(this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// /Users/kcjones-evans/work/primeng/src/app/showcase/components/terminal/terminaldemo.ts"],"sourceRoot":"webpack:///"}